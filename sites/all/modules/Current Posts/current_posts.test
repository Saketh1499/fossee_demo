<?php
/**
 * @file
 * Tests for the Current posts module
 */

/**
 * The base class DrupalWebTestCase provides the framework for running our tests
 * 
 * building an internal Drupal site and browser as a context for the tests.
 *   See API functions for a full exploration of its capabilities. SimpleTest 
 *   also provides the class DrupalUnitTestCase for unit tests of functions that
 *   do not require the full bootstrapped Drupal.
 */
class CurrentPostsTestCase extends DrupalWebTestCase {
  /**
   * The getInfo() method is necessary for any SimpleTest you write for Drupal.
   * 
   * Without it, your tests will not run. The elements in the array determine
   *   how your test appears in the list of tests in your Drupal installation.
   */
  public static function getInfo() {
    return array(
      'name' => 'Current posts module functionality',
      'description' => 'Tests hooks in the Current posts module',
      'group' => 'Current posts',
    );
  }
  /**
   * ith this, we call a method of the parent class to do whatever setup is necessary. 
   * 
   * You can create a user, specify special permissions, and log the user in. All we
   *   need is to install the module we pass as an argument, in this case, of course, 
   *   current_posts. Our tests will run without this method, but we include it because
   *   more often than not, you will need setup for your tests.
   */
  public function setUp() {
    parent::setUp('current_posts');
  }
  /**
   * Test permission
   */
  public function testPermission() {
    // We start by creating a variable $data to hold the results
    //  his function takes two parameters, the name of the module,
    //  and the name of the hook. When it runs, it's effectively the same
    //  as calling current_posts_permission(), which is exactly what we want.
    // Each of our tests will begin with a call to this function.
    $data = module_invoke('current_posts', 'permission');
    // Check is array
    $this->assertTrue(is_array($data), t('Permission hook returns array.'));
    // assertTrue checks that the first argument resolves to true.
    // The second argument is the message shown on the test result screen after the tests run.
    $this->assertTrue(array_key_exists('access current_posts content', $data),
    t('Permission is as expected.'));
  }
  /**
   * Tests for equality
   */
  public function testMenu() {
     $items = module_invoke('current_posts', 'menu');
     
     $this->assertEqual(2, count($items), t('Two items in menu.'));
     
     $this->assertIdentical($items['admin/config/content/current_posts']['title'], 
      $items['current_posts']['title'], t('Titles are identical'));
  }
  /**
   * Test Block View
   */
  public function testBlockView() {
    // In our tests for current_posts_block_view() we have a third argument
    //  for module_invoke(), telling the method to call the current_posts case 
    //  of that function.
    $data = module_invoke('current_posts', 'block_view', 'current_posts');
    // Be careful with a test like this. It will break if you change the subject
    //  of the block without also changing the test. It works well as an example,
    //  but in practice you would only use a test like this for an important string
    //  unlikely to change.
    $this->assertEqual(t('Current posts'), $data['subject'], t('Subject is as expected.'));
    // Use assertNotNull() to check that the first argument does not resolve to null.
    //  We expect the variable to contain data and state that in the message.
    $this->assertNotNull($data['content'], t('Block contains data.'));
  }
  /**
   * Test block info
   */
  public function testBlockInfo() {
    $info = module_invoke('current_posts', 'block_info');
    
    $this->assertNotEqual('DRUPAL_CACHE_PER_USER', $info['current_posts']['cache'],
      t('Cache is not set to DRUPAL_CACHE_PER_USER'));
    
    $this->assertFALSE(count($info) > 1, t('No more than one block defined.'));
  }
  /**
   * Test block
   */
  public function testBlock() {
    $info = module_invoke('current_posts', 'block_info');
    $data = module_invoke('current_posts', 'block_view', 'current_posts');
    
    $this->assertIdentical($info['current_posts']['info'], $data['subject'], t('Block list name and subject are identical.'));
  }
}